{"version":3,"file":"static/js/21.81792ab3.chunk.js","mappings":"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","sources":["components/slider/index.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","components/tiles/index.js","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport Image from \"../image\";\r\n\r\nexport default function Slider(props) {\r\n  const arr = [];\r\n  const ref = useRef();\r\n  const scrollTo = (parity) => {\r\n    let width = ref.current.clientWidth;\r\n    if (parity > 0) ref.current.scrollLeft += width;\r\n    else if (parity < 0) ref.current.scrollLeft -= width;\r\n  };\r\n\r\n  for (let i = 0; i < props?.arr?.length; i++) {\r\n    arr.push(\r\n      <span\r\n        onClick={() => {\r\n          if (props?.arr[i]?.link) {\r\n            window.location.href = props?.arr[i]?.link;\r\n          }\r\n        }}\r\n        className={\r\n          props?.arr[i]?.link\r\n            ? \"relative group hover:scale-110 transition-all group cursor-pointer Tiles md:p-5 p-2 lg:min-w-[20%] max-h-[25%] min-w-[50%] md:min-w-[25%] lg:max-w-[20%] max-w-[50%] md:max-w-[25%] min-h-[12rem] md:min-h-[20rem] justify-center items-center\"\r\n            : \"relative group Tiles flex flex-col md:p-5 p-2 cursor-pointer lg:min-w-[20%] max-h-[25%] min-h-[15rem] md:min-h-[20rem] min-w-[50%] md:min-w-[25%] lg:max-w-[20%] max-w-[50%] md:max-w-[25%]  justify-center items-center\"\r\n        }\r\n      >\r\n        <Image lazy={i>10?true:false} source={props?.arr[i]?.src} alt={props?.arr[i]?.alt} />\r\n        {props?.arr[i]?.tag?.length > 0 && (\r\n          <span\r\n            className={\r\n              props?.arr[i]?.src!==\"/assets/images/nonfoundhor.png\"\r\n                ? \"bg-yellow-500 p-1 absolute animate-[slideOutDown_1s_backwards] group-hover:animate-[slideInUp_2s_forwards] hidden group-hover:flex group-hover:scale-100 transition-all scale-0 w-full items-center justify-center px-2 bottom-0 preventCopy text-prime\"\r\n                : \"bg-yellow-500 p-1 absolute w-full items-center justify-center px-2 bottom-0 preventCopy text-prime\"\r\n            }\r\n          >\r\n            <ul>\r\n              <li className=\"font-bold p-1\">{props?.arr[i]?.tag[1]}</li>\r\n              <li className=\"text-gray-500 p-1\">{props?.arr[i]?.tag[0]}</li>\r\n            </ul>\r\n          </span>\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"relative w-full overflow-x-auto\">\r\n      <div\r\n        className=\"absolute top-1/2 left-0 bg-black rounded-full z-50 p-2 cursor-pointer opacity-60 hover:opacity-100\"\r\n        onClick={() => scrollTo(-400)}\r\n      >\r\n        <b className=\"text-tert p-0 rotate-180 rounded-full h-fit w-fit flex justify-center items-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"26\"\r\n            height=\"26\"\r\n            fill=\"currentColor\"\r\n            class=\"bi bi-arrow-right-circle\"\r\n            viewBox=\"0 0 16 16\"\r\n          >\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              d=\"M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z\"\r\n            />\r\n          </svg>\r\n        </b>\r\n      </div>\r\n      <div\r\n        ref={ref}\r\n        className=\"relative justify-start overflow-x-auto overflow-y-hidden md:overflow-hidden scroll-smooth flex\"\r\n      >\r\n        {arr}\r\n      </div>\r\n      <div\r\n        className=\"absolute bottom-1/2 right-0 bg-black rounded-full z-50 p-2 cursor-pointer opacity-60 hover:opacity-100\"\r\n        onClick={() => scrollTo(400)}\r\n      >\r\n        <b className=\"text-tert p-0 rotate-180 rounded-full h-fit w-fit flex justify-center items-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"26\"\r\n            height=\"26\"\r\n            fill=\"currentColor\"\r\n            class=\"bi bi-arrow-left-circle\"\r\n            viewBox=\"0 0 16 16\"\r\n          >\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              d=\"M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z\"\r\n            />\r\n          </svg>\r\n        </b>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React,{useEffect, useState} from 'react';\r\nimport Slider from \"../slider\";\r\nimport {useInView} from \"react-intersection-observer\";\r\n\r\nexport default function Tiles(props) {\r\n  const [list,setList] = useState([]);\r\n  const getList = async()=>{\r\n    let res = await fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+process.env.REACT_APP_MOVIE_API_KEY+\"&with_genres=\"+props?.genreNumberMO);\r\n    let data = await res.json();\r\n    let arrAction = [];\r\n    data.results.forEach(el=>{\r\n      const dataEntr = {\r\n        bg:'https://image.tmdb.org/t/p/original'+el.backdrop_path,\r\n        profile:el.poster_path?'https://image.tmdb.org/t/p/w500'+el.poster_path:\"/assets/images/nonfoundhor.png\",\r\n      popularity:el.vote_count?el.vote_count:1,\r\n        id:el.id,\r\n        type:'movie',\r\n        name:el.title\r\n      }\r\n      arrAction.push(dataEntr)\r\n    })\r\n    res = await fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\"+process.env.REACT_APP_MOVIE_API_KEY+\"&with_genres=\"+props?.genreNumberTV);\r\n    data = await res.json();\r\n    data.results.forEach(el=>{\r\n      const dataEntr = {\r\n        bg:'https://image.tmdb.org/t/p/original'+el.backdrop_path,\r\n        profile:el.poster_path?'https://image.tmdb.org/t/p/w500'+el.poster_path:\"/assets/images/nonfoundhor.png\",\r\n      popularity:el.vote_count?el.vote_count:1,\r\n        id:el.id,\r\n        type:'tv',\r\n        name:el.name\r\n      }\r\n      arrAction.push(dataEntr)\r\n    })\r\n    arrAction = arrAction.sort((a,b)=>parseInt(b.popularity)-parseInt(a.popularity))\r\n    setList(arrAction)\r\n  }\r\n\r\n  const arr=[];\r\n  if(list?.length>0){\r\n    let len = list?.length;\r\n    if(props?.heading === 'Trending') len = list?.length>19?19:list?.length;\r\n    for(let i = 0; i < len; i++){\r\n      arr.push({\r\n        src:list[i]?.profile,\r\n        alt:list[i]?.name,\r\n        link:list[i]?.type+'/'+list[i]?.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getList();\r\n  },[]);\r\n\r\n  const { ref, inView, entry } = useInView({\r\n    /* Optional options */\r\n    threshold: 0.7,\r\n  });\r\n\r\n  return (\r\n    <div ref={ref} \r\n    className={inView?\"flex flex-col w-full h-8/12 md:h-9/12 rounded-md border-2 p-2 text-white justify-center items-center text-2xl py-10 opacity-100 active transition-all\":\"flex flex-col w-full rounded-md border-2 p-2 text-white justify-center items-center text-2xl py-10 opacity-50\"}>\r\n          <div className=\" bg-gradient-to-r from-tert to-second text-prime p-2 rounded-md shadow-inner fontDesi\">\r\n            {props.heading}\r\n          </div>\r\n          <Slider arr={arr}/>\r\n    </div>\r\n  )\r\n}\r\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Slider","props","arr","ref","useRef","scrollTo","parity","width","current","clientWidth","scrollLeft","i","push","onClick","link","window","location","href","className","lazy","source","src","alt","tag","length","xmlns","height","fill","class","viewBox","d","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","children","React","Tiles","useState","list","setList","getList","fetch","genreNumberMO","res","json","data","arrAction","results","el","dataEntr","bg","backdrop_path","profile","poster_path","popularity","vote_count","type","name","title","genreNumberTV","a","b","parseInt","len","heading","useEffect","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","state","setState","entryTarget","_state$entry","result","useInView"],"sourceRoot":""}